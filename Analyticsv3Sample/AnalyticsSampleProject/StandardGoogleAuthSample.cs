 
// Copyright 2015 DAIMTO :  www.daimto.com
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
// the License. You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
// an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by DAIMTO-Google-apis-Sample-generator 1.0.0
//     Build date: 11/30/2015 22:16:59
//     C# generater version: 1.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Analytics.v3;
using Google.Apis.Services;
using Google.Apis.Util.Store;

/// <summary>
/// API Name: Analytics.v3
/// Description: View and manage your Google Analytics data
/// Documentation: https://developers.google.com/analytics/
/// Nuget Package
/// https://www.nuget.org/packages/Google.Apis.Analytics.v3/
/// PM> Install-Package Google.Apis.Analytics.v3 
/// </summary>
namespace DAIMTO.Analytics.v3.Sample
{
    public class StandardGoogleAuth
    {

	 /// <summary>
        /// The Google APIs Client Library for .net uses the client_secrets.json file format for storing the client_id, client_secret, and other OAuth 2.0 parameters.
        /// The client_secrets.json file format is a JSON formatted file containing the client ID, client secret, and other OAuth 2.0 parameters.
        ///      
        /// This file can be obtained from Google Developers console:   https://console.developers.google.com/project?authuser=0
        /// </summary>
        /// <param name="clientSecretJson">Path to the client secret json file from Google Developers console.</param>
        /// <param name="userName">The user to authorize.</param>
        /// <returns>a valid AnalyticsService</returns>
        public static AnalyticsService AuthenticateOauth(string clientSecretJson, string userName)
        {
            if (string.IsNullOrEmpty(userName))
                throw new Exception("userName is required for datastore.");

            if (!File.Exists(clientSecretJson))
                throw new Exception("Cant find Client Secret Json file.");
			
            string[] scopes = new string[] { AnalyticsService.Scope.Analytics,                       // View and manage your Google Analytics data
                                             AnalyticsService.Scope.AnalyticsEdit,                   // Edit Google Analytics management entities
                                             AnalyticsService.Scope.AnalyticsManageUsers,            // Manage Google Analytics Account users by email address
                                             AnalyticsService.Scope.AnalyticsManageUsersReadonly,    // View Google Analytics user permissions
                                             AnalyticsService.Scope.AnalyticsProvision,              // Create a new Google Analytics account along with its default property and view
                                             AnalyticsService.Scope.AnalyticsReadonly};              // View your Google Analytics data
            try
            {
                UserCredential credential;
                using (var stream = new FileStream(clientSecretJson, FileMode.Open, FileAccess.Read))
                {
                    string credPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);
                    credPath = Path.Combine(credPath, ".credentials/Analytics");

                    credential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                        GoogleClientSecrets.Load(stream).Secrets,
                        scopes,
                        userName,
                        CancellationToken.None,
                        new FileDataStore(credPath, true)).Result;
                    Console.WriteLine("Credential file saved to: " + credPath);
                }

                // Create Analytics API service.
                var service = new AnalyticsService(new BaseClientService.Initializer()
                    {
                        HttpClientInitializer = credential,
                        ApplicationName = "Analytics Authentication Sample",
                    });
                return service;
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.InnerException);
                throw ex;

            }
        }
        /// <summary>
        /// Authenticate to Google Using Oauth2
        /// Documentation https://developers.google.com/accounts/docs/OAuth2
        /// </summary>
        /// <param name="clientId">From Google Developer console https://console.developers.google.com</param>
        /// <param name="clientSecret">From Google Developer console https://console.developers.google.com</param>
        /// <param name="userName">The user to authorize.</param>
        /// <returns>a valid AnalyticsService</returns>
        public static AnalyticsService AuthenticateOauth(string clientId, string clientSecret, string userName)
        {
            if (string.IsNullOrEmpty(clientId))
                throw new Exception("clientId is required.");
            if (string.IsNullOrEmpty(clientSecret))
                throw new Exception("clientSecret is required.");
            if (string.IsNullOrEmpty(userName))
                throw new Exception("userName is required for datastore.");

            
            string[] scopes = new string[] { AnalyticsService.Scope.Analytics,                       // View and manage your Google Analytics data
                                             AnalyticsService.Scope.AnalyticsEdit,                   // Edit Google Analytics management entities
                                             AnalyticsService.Scope.AnalyticsManageUsers,            // Manage Google Analytics Account users by email address
                                             AnalyticsService.Scope.AnalyticsManageUsersReadonly,    // View Google Analytics user permissions
                                             AnalyticsService.Scope.AnalyticsProvision,              // Create a new Google Analytics account along with its default property and view
                                             AnalyticsService.Scope.AnalyticsReadonly};              // View your Google Analytics data

            try
            {

                string credPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.Personal);
                credPath = Path.Combine(credPath, ".credentials/Analytics");

                // here is where we Request the user to give us access, or use the Refresh Token that was previously stored in %AppData%
                UserCredential credential = GoogleWebAuthorizationBroker.AuthorizeAsync(new ClientSecrets { ClientId = clientId, ClientSecret = clientSecret }
                                                                                             , scopes
                                                                                             , userName
                                                                                             , CancellationToken.None
                                                                                             , new FileDataStore(credPath, true)).Result;

                var service = new AnalyticsService(new BaseClientService.Initializer()
                {
                    HttpClientInitializer = credential,
                    ApplicationName = "Analytics Authentication Sample",
                });
                return service;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.InnerException);
                throw ex;
            }

        }

        /// <summary>
        /// Authenticating to Google using a Service account
        /// Documentation: https://developers.google.com/accounts/docs/OAuth2#serviceaccount
        /// </summary>
        /// <param name="serviceAccountEmail">From Google Developer console https://console.developers.google.com</param>
        /// <param name="keyFilePath">Location of the Service account key file downloaded from Google Developer console https://console.developers.google.com</param>
        /// <returns>a valid AnalyticsService</returns>
        public static AnalyticsService AuthenticateServiceAccount(string serviceAccountEmail, string keyFilePath)
        {
            if (string.IsNullOrEmpty(keyFilePath))
                throw new Exception("keyFilePath is required.");

            if (!File.Exists(keyFilePath))
                throw new Exception("Cant find .p12 key File.");

            if (string.IsNullOrEmpty(serviceAccountEmail))
                throw new Exception("ServiceAccountEmail is required.");

            
            string[] scopes = new string[] { AnalyticsService.Scope.Analytics,                       // View and manage your Google Analytics data
                                             AnalyticsService.Scope.AnalyticsEdit,                   // Edit Google Analytics management entities
                                             AnalyticsService.Scope.AnalyticsManageUsers,            // Manage Google Analytics Account users by email address
                                             AnalyticsService.Scope.AnalyticsManageUsersReadonly,    // View Google Analytics user permissions
                                             AnalyticsService.Scope.AnalyticsProvision,              // Create a new Google Analytics account along with its default property and view
                                             AnalyticsService.Scope.AnalyticsReadonly};              // View your Google Analytics data
       


            try
            {
                var certificate = new X509Certificate2(keyFilePath, "notasecret", X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.Exportable);

                ServiceAccountCredential credential = new ServiceAccountCredential(new ServiceAccountCredential.Initializer(serviceAccountEmail)
                                                                                    {
                                                                                        Scopes = scopes
                                                                                    }.FromCertificate(certificate));

                // Create the service.
                var service = new AnalyticsService(new BaseClientService.Initializer()
                {
                    HttpClientInitializer = credential,
                    ApplicationName = "Analytics Authentication Sample",
                });
                return service;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.InnerException);
                throw ex;
            }
        }
		        /// <summary>
        /// Used for accessing public api data. 
        /// </summary>
        /// <param name="apiKey">Public API key from Google Developers console</param>
        /// <returns>a valid AnalyticsService</returns>
        public static AnalyticsService AuthenticatePublic(string apiKey)
        {
            if (string.IsNullOrEmpty(apiKey))
                throw new Exception("apiKey is required.");
            try
            {
                // Create the service.
                var service = new AnalyticsService(new BaseClientService.Initializer()
                {
                    ApiKey = apiKey,
                    ApplicationName = "Analytics Authentication Sample",
                });
                return service;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.InnerException);
                throw ex;
            }
        }

    }


}





